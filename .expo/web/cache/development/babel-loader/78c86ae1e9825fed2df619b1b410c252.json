{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\ABC\\\\Clump\\\\coder\\\\src\\\\Components\\\\Auth\\\\index.js\";\n\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { auth, provider } from \"./firebase\";\nimport * as Google from 'expo-google-app-auth';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { CredentialsContext } from \"./cred\";\n\nvar ProfilePage = function ProfilePage(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      googleSubmitting = _useState2[0],\n      setGoogleSubmitting = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messageType = _useState6[0],\n      setMessageType = _useState6[1];\n\n  var _useContext = useContext(CredentialsContext),\n      storedCredentials = _useContext.storedCredentials,\n      setStoredCredentials = _useContext.setStoredCredentials;\n\n  var handleGoogleSignin = function handleGoogleSignin() {\n    setGoogleSubmitting(true);\n    var config = {\n      androidClientId: \"520350559970-q9dokdd76hcqmh6rb3ph1brhd2bj28ro.apps.googleusercontent.com\",\n      scopes: ['profile', 'email']\n    };\n    Google.logInAsync(config).then(function (result) {\n      var type = result.type,\n          user = result.user;\n\n      if (type == 'success') {\n        var email = user.email,\n            name = user.name,\n            photoUrl = user.photoUrl;\n        persistLogin({\n          email: email,\n          name: name,\n          photoUrl: photoUrl\n        }, 'Google signin successful', 'SUCCESS');\n      } else {\n        handleMessage('Google Signin was cancelled');\n      }\n\n      setGoogleSubmitting(false);\n    }).catch(function (error) {\n      handleMessage('An error occurred. Check your network and try again');\n      console.log(error);\n      setGoogleSubmitting(false);\n    });\n  };\n\n  var handleMessage = function handleMessage(message) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    setMessage(message);\n    setMessageType(type);\n  };\n\n  var persistLogin = function persistLogin(credentials, message, status) {\n    AsyncStorage.setItem('flowerCribCredentials', JSON.stringify(credentials)).then(function () {\n      handleMessage(message, status);\n      setStoredCredentials(credentials);\n    }).catch(function (error) {\n      handleMessage('Persisting login failed');\n      console.log(error);\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundColor: \"#e0e0e0\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  }, React.createElement(Image, {\n    style: {\n      height: 90,\n      width: 130,\n      borderRadius: 5\n    },\n    source: require(\"../../../assets/google.jpg\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 14\n    }\n  }), React.createElement(Text, {\n    style: {\n      fontWeight: \"600\",\n      marginTop: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 14\n    }\n  }, \"Please Login\"), React.createElement(View, {\n    style: {\n      marginTop: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 14\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return handleGoogleSignin();\n    },\n    style: {\n      width: 160,\n      backgroundColor: \"#fff\",\n      borderRadius: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 18\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: \"center\",\n      padding: 5,\n      fontWeight: \"600\",\n      color: \"#e64a19\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 22\n    }\n  }, \"Google Sign In+\"))));\n};\n\nexport default ProfilePage;","map":{"version":3,"sources":["C:/Users/ABC/Clump/coder/src/Components/Auth/index.js"],"names":["React","useEffect","useContext","useState","auth","provider","Google","AsyncStorage","CredentialsContext","ProfilePage","navigation","googleSubmitting","setGoogleSubmitting","message","setMessage","messageType","setMessageType","storedCredentials","setStoredCredentials","handleGoogleSignin","config","androidClientId","scopes","logInAsync","then","result","type","user","email","name","photoUrl","persistLogin","handleMessage","catch","error","console","log","credentials","status","setItem","JSON","stringify","flex","justifyContent","alignItems","backgroundColor","height","width","borderRadius","require","fontWeight","marginTop","textAlign","padding","color"],"mappings":"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","sourcesContent":["import React,{useEffect,useContext,useState} from \"react\"\r\nimport {auth , provider}  from './firebase'\r\nimport * as Google from 'expo-google-app-auth'\r\nimport { View,Text,StyleSheet,TouchableOpacity,Image } from \"react-native\"\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\n\r\n\r\n\r\nimport { CredentialsContext } from './cred';\r\n\r\n\r\n\r\n\r\n\r\n\r\n const ProfilePage =({navigation})=>{\r\n\r\n  const [googleSubmitting, setGoogleSubmitting] = useState(false);\r\n  const [message, setMessage] = useState();\r\n  const [messageType, setMessageType] = useState();\r\n  const {storedCredentials, setStoredCredentials} = useContext(CredentialsContext);\r\n  const handleGoogleSignin = () => {\r\n    setGoogleSubmitting(true);\r\n    const config = {\r\n     \r\n      androidClientId: `520350559970-q9dokdd76hcqmh6rb3ph1brhd2bj28ro.apps.googleusercontent.com`,\r\n      scopes: ['profile', 'email'],\r\n    };\r\n\r\n    Google.logInAsync(config)\r\n      .then((result) => {\r\n        const { type, user } = result;\r\n        if (type == 'success') {\r\n          const { email, name, photoUrl } = user;\r\n          persistLogin({ email, name, photoUrl }, 'Google signin successful', 'SUCCESS');\r\n        } else {\r\n          handleMessage('Google Signin was cancelled');\r\n        }\r\n        setGoogleSubmitting(false);\r\n      })\r\n      .catch((error) => {\r\n        handleMessage('An error occurred. Check your network and try again');\r\n        console.log(error);\r\n        setGoogleSubmitting(false);\r\n      });\r\n  };\r\n  const handleMessage = (message, type = '') => {\r\n    setMessage(message);\r\n    setMessageType(type);\r\n  };\r\n  const persistLogin = (credentials, message, status) => {\r\n    AsyncStorage.setItem('flowerCribCredentials', JSON.stringify(credentials))\r\n      .then(() => {\r\n        handleMessage(message, status);\r\n        setStoredCredentials(credentials);\r\n      })\r\n      .catch((error) => {\r\n        handleMessage('Persisting login failed');\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n\r\n\r\n \r\n  \r\n\r\n   \r\n     return(\r\n         <View style={{flex:1,justifyContent:\"center\",alignItems:\"center\",backgroundColor:\"#e0e0e0\"}}>\r\n             <Image\r\n             style={{height:90,width:130,borderRadius:5}}\r\n             source={require(\"../../../assets/google.jpg\")}\r\n             />\r\n             <Text style={{fontWeight:\"600\",marginTop:5}}>Please Login</Text>\r\n             <View style={{marginTop:10}}>\r\n                 <TouchableOpacity \r\n                onPress={()=>handleGoogleSignin()}\r\n                 style={{width:160,backgroundColor:\"#fff\",borderRadius:5}}>\r\n                     <Text style={{textAlign:\"center\",padding:5,fontWeight:\"600\",color:\"#e64a19\"}}>Google Sign In+</Text>\r\n                 </TouchableOpacity>\r\n             </View>\r\n         </View>\r\n     )\r\n }\r\n export default ProfilePage"]},"metadata":{},"sourceType":"module"}