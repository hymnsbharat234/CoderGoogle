{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\ABC\\\\Clump\\\\coder\\\\src\\\\Components\\\\Auth\\\\index.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from \"react\";\nimport { auth, provider } from \"./firebase\";\nimport firebase from 'firebase';\nimport * as Google from 'expo-google-app-auth';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\n\nvar ProfilePage = function ProfilePage(_ref) {\n  var navigation = _ref.navigation;\n\n  var isUserEqual = function isUserEqual(googleUser, firebaseUser) {\n    if (firebaseUser) {\n      var providerData = firebaseUser.providerData;\n\n      for (var i = 0; i < providerData.length; i++) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  var onSignIn = function onSignIn(googleUser) {\n    console.log('Google Auth Response', googleUser);\n    var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n      unsubscribe();\n\n      if (!this.isUserEqual(googleUser, firebaseUser)) {\n        var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n        firebase.auth().signInAndRetrieveDataWithCredential(credential).then(function (result) {\n          console.log('user signed in ');\n\n          if (result.additionalUserInfo.isNewUser) {\n            firebase.database().ref('/users/' + result.user.uid).set({\n              gmail: result.user.email,\n              profile_picture: result.additionalUserInfo.profile.picture,\n              first_name: result.additionalUserInfo.profile.given_name,\n              last_name: result.additionalUserInfo.profile.family_name,\n              created_at: Date.now()\n            }).then(function (snapshot) {});\n          } else {\n            firebase.database().ref('/users/' + result.user.uid).update({\n              last_logged_in: Date.now()\n            });\n          }\n        }).catch(function (error) {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          var email = error.email;\n          var credential = error.credential;\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n    }.bind(_this));\n  };\n\n  var signInWithGoogleAsync = function signInWithGoogleAsync() {\n    var result;\n    return _regeneratorRuntime.async(function signInWithGoogleAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Expo.Google.logInAsync({\n              behavior: 'web',\n              androidClientId: \"520350559970-q9dokdd76hcqmh6rb3ph1brhd2bj28ro.apps.googleusercontent.com\",\n              scopes: ['profile', 'email']\n            }));\n\n          case 3:\n            result = _context.sent;\n\n            if (!(result.type === 'success')) {\n              _context.next = 10;\n              break;\n            }\n\n            _this.onSignIn(result);\n\n            return _context.abrupt(\"return\", result.accessToken);\n\n          case 10:\n            return _context.abrupt(\"return\", {\n              cancelled: true\n            });\n\n          case 11:\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", {\n              error: true\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundColor: \"#e0e0e0\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 10\n    }\n  }, React.createElement(Image, {\n    style: {\n      height: 90,\n      width: 130,\n      borderRadius: 5\n    },\n    source: require(\"../../../assets/google.jpg\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 14\n    }\n  }), React.createElement(Text, {\n    style: {\n      fontWeight: \"600\",\n      marginTop: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 14\n    }\n  }, \"Please Login\"), React.createElement(View, {\n    style: {\n      marginTop: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 14\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return signInWithGoogleAsync();\n    },\n    style: {\n      width: 160,\n      backgroundColor: \"#fff\",\n      borderRadius: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 18\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: \"center\",\n      padding: 5,\n      fontWeight: \"600\",\n      color: \"#e64a19\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 22\n    }\n  }, \"Google Sign In+\"))));\n};\n\nexport default ProfilePage;","map":{"version":3,"sources":["C:/Users/ABC/Clump/coder/src/Components/Auth/index.js"],"names":["React","useEffect","auth","provider","firebase","Google","ProfilePage","navigation","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","console","log","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInAndRetrieveDataWithCredential","then","result","additionalUserInfo","isNewUser","database","ref","user","set","gmail","email","profile_picture","profile","picture","first_name","given_name","last_name","family_name","created_at","Date","now","snapshot","update","last_logged_in","catch","error","errorCode","code","errorMessage","message","bind","signInWithGoogleAsync","Expo","logInAsync","behavior","androidClientId","scopes","type","cancelled","flex","justifyContent","alignItems","backgroundColor","height","width","borderRadius","require","fontWeight","marginTop","textAlign","padding","color"],"mappings":"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","sourcesContent":["import React,{useEffect} from \"react\"\r\nimport {auth , provider}  from './firebase'\r\nimport firebase from 'firebase';\r\nimport * as Google from 'expo-google-app-auth'\r\nimport { View,Text,StyleSheet,TouchableOpacity,Image } from \"react-native\"\r\n\r\n\r\n\r\n//   useEffect(()=>{\r\n\r\n//     GoogleSignin.configure({\r\n//         webClientId: '520350559970-clanfd1qkqlnkpk314qfkl43fj88t79h.apps.googleusercontent.com',\r\n//       });\r\n//   },[])\r\n\r\n\r\n//   const signIn=async()=>{\r\n//       try{\r\n//           await GoogleSignin.hasPlayServices();\r\n//           const userInfo=await GoogleSignin.signIn()\r\n//           console.log(\"due\",userInfo)\r\n//           setUser(userInfo)\r\n//       }catch(error){\r\n//           console.log(\"message\",error.message);\r\n\r\n//       }\r\n//   }\r\n\r\n\r\n\r\n\r\n\r\n const ProfilePage =({navigation})=>{\r\n\r\n  \r\n  // const signInWithGoogleAsync=async()=> {\r\n  //   try {\r\n  //     const result = await Google.logInAsync({\r\n       \r\n  //       behavior: 'web',\r\n  //       scopes: ['profile', 'email'],\r\n      \r\n  //     });\r\n  //     console.log(\"return\",result.accessToken)\r\n  \r\n  //     if (result.type === 'success') {\r\n  //       return result.accessToken;\r\n  //      navigation.navigate(\"HomePage\")\r\n       \r\n      \r\n  //     } else {\r\n  //       return { cancelled: true };\r\n  //     }\r\n  //   } catch (e) {\r\n  //     return { error: true };\r\n  //   }\r\n   \r\n  // }\r\n  const isUserEqual = (googleUser, firebaseUser) => {\r\n    if (firebaseUser) {\r\n      var providerData = firebaseUser.providerData;\r\n      for (var i = 0; i < providerData.length; i++) {\r\n        if (\r\n          providerData[i].providerId ===\r\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n          providerData[i].uid === googleUser.getBasicProfile().getId()\r\n        ) {\r\n          // We don't need to reauth the Firebase connection.\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  const onSignIn = googleUser => {\r\n    console.log('Google Auth Response', googleUser);\r\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n    var unsubscribe = firebase.auth().onAuthStateChanged(\r\n      function(firebaseUser) {\r\n        unsubscribe();\r\n        // Check if we are already signed-in Firebase with the correct user.\r\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\r\n          // Build Firebase credential with the Google ID token.\r\n          var credential = firebase.auth.GoogleAuthProvider.credential(\r\n            googleUser.idToken,\r\n            googleUser.accessToken\r\n          );\r\n          // Sign in with credential from the Google user.\r\n          firebase\r\n            .auth()\r\n            .signInAndRetrieveDataWithCredential(credential)\r\n            .then(function(result) {\r\n              console.log('user signed in ');\r\n              if (result.additionalUserInfo.isNewUser) {\r\n                firebase\r\n                  .database()\r\n                  .ref('/users/' + result.user.uid)\r\n                  .set({\r\n                    gmail: result.user.email,\r\n                    profile_picture: result.additionalUserInfo.profile.picture,\r\n                    first_name: result.additionalUserInfo.profile.given_name,\r\n                    last_name: result.additionalUserInfo.profile.family_name,\r\n                    created_at: Date.now()\r\n                  })\r\n                  .then(function(snapshot) {\r\n                    // console.log('Snapshot', snapshot);\r\n                  });\r\n              } else {\r\n                firebase\r\n                  .database()\r\n                  .ref('/users/' + result.user.uid)\r\n                  .update({\r\n                    last_logged_in: Date.now()\r\n                  });\r\n              }\r\n            })\r\n            .catch(function(error) {\r\n              // Handle Errors here.\r\n              var errorCode = error.code;\r\n              var errorMessage = error.message;\r\n              // The email of the user's account used.\r\n              var email = error.email;\r\n              // The firebase.auth.AuthCredential type that was used.\r\n              var credential = error.credential;\r\n              // ...\r\n            });\r\n        } else {\r\n          console.log('User already signed-in Firebase.');\r\n        }\r\n      }.bind(this)\r\n    );\r\n  };\r\n\r\n  const signInWithGoogleAsync = async () => {\r\n    try {\r\n      const result = await Expo.Google.logInAsync({\r\n        // androidClientId: YOUR_CLIENT_ID_HERE,\r\n        behavior: 'web',\r\n        androidClientId: `520350559970-q9dokdd76hcqmh6rb3ph1brhd2bj28ro.apps.googleusercontent.com`,\r\n        scopes: ['profile', 'email']\r\n      });\r\n\r\n      if (result.type === 'success') {\r\n        this.onSignIn(result);\r\n        return result.accessToken;\r\n        navigation.navigate(\"HomePage\")\r\n      } else {\r\n        return { cancelled: true };\r\n      }\r\n    } catch (e) {\r\n      return { error: true };\r\n    }\r\n  };\r\n  \r\n\r\n   \r\n     return(\r\n         <View style={{flex:1,justifyContent:\"center\",alignItems:\"center\",backgroundColor:\"#e0e0e0\"}}>\r\n             <Image\r\n             style={{height:90,width:130,borderRadius:5}}\r\n             source={require(\"../../../assets/google.jpg\")}\r\n             />\r\n             <Text style={{fontWeight:\"600\",marginTop:5}}>Please Login</Text>\r\n             <View style={{marginTop:10}}>\r\n                 <TouchableOpacity \r\n                onPress={()=>signInWithGoogleAsync()}\r\n                 style={{width:160,backgroundColor:\"#fff\",borderRadius:5}}>\r\n                     <Text style={{textAlign:\"center\",padding:5,fontWeight:\"600\",color:\"#e64a19\"}}>Google Sign In+</Text>\r\n                 </TouchableOpacity>\r\n             </View>\r\n         </View>\r\n     )\r\n }\r\n export default ProfilePage"]},"metadata":{},"sourceType":"module"}